// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

     /*
    zx : d->0 (c1 c3 c5)   nx : !d (c3 c4 c6)
    zy : a|m->0  (c1 c3 c5) ny : !(a|m) (c1 c2 c6)
    f : add면 1, and면 0 (c5)
    no : 출력 out 반전
    zr : out = 0일 때만 True
    ng : out < 0일 때만 True
    */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //i:0이면 A-명령어
    Not(in=instruction[15], out=ainstruction);
    //(1->0->1)1이면 C-명령어
    Not(in=ainstruction, out=cinstruction);
    //C-명령어이면서 d1=1이면 A-Register load
    And(a=cinstruction, b=instruction[5], out=aRegLoad);
    Mux16(a=instruction, b=ALUoutput, sel=aRegLoad, out=aRegIn);

    //A-명령어이거나 C-명령어이면서 d1=1이면 A-Register load
    Or(a=ainstruction, b=aRegLoad, out=aRegLoad2);

    ARegister(in=aRegIn, load=aRegLoad2, out=aRegOut, out[0..14] = addressM);
    //111a c1c2c3c4 c5c6d1d2 d3j1j2j3에서 a=0이면 A이용, a=1이면 M이용
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=ALUin);
    //C-명령어이면서 d2=1이면 D-Register load
    And(a=cinstruction, b=instruction[4], out=dRegLoad);
    DRegister(in=ALUoutput, load=dRegLoad, out=dRegOut);



    ALU(x=dRegOut, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=zr, ng=ng);
    //C-명령어이면서 d3=1이면 Memory[A]에 씀
    And(a=cinstruction, b=instruction[3], out=writeM);

    //jump 경우들
    And(a=instruction[1], b=zr, out=JEQ); //010
    And(a=instruction[2], b=ng, out=JLT); //100
    Or(a=zr, b=ng, out=zeroOrminus);
    Not(in=zeroOrminus, out=plus);
    And(a=plus, b=instruction[0], out=JGT); //001

    Or(a=JEQ, b=JLT, out=onetwo);
    Or(a=onetwo, b=JGT, out=onetwothree);

    And(a=cinstruction, b=onetwothree, out=jump);

    Not(in=jump, out=inc);


    PC(in=aRegOut, load=jump, inc=inc, reset=reset, out[0..14]=pc);

}
